{"version":3,"sources":["pages/Assets/Exchanges/Exchanges.js"],"names":["StyledCard","styled","Card","StyledCardBody","Body","mapDispatchToProps","fetchMyTradesRequest","connect","state","networkId","getNetworkId","myTrades","getMyTrades","isLoadingMyTrades","getIsLoadingMyTrades","isRefreshingMyTrades","getIsRefreshingMyTrades","isLoadedMyTrades","getIsLoadedMyTrades","t","useTranslation","useEffect","Header","Spinner","size","Table","palette","columns","accessor","Cell","cellProps","formatTxTimestamp","cell","value","width","sortable","id","row","original","fromCurrencyKey","toCurrencyKey","Currency","Pair","baseCurrencyKey","quoteCurrencyKey","sortType","Tooltip","title","formatCurrency","toAmount","LONG_CRYPTO_CURRENCY_DECIMALS","placement","formatCurrencyWithKey","SHORT_CRYPTO_CURRENCY_DECIMALS","fromAmount","formatCurrencyWithSign","USD_SIGN","Link","to","getEtherscanTxLink","hash","isExternal","Button","data","isLoading","noResultsMessage","length","undefined"],"mappings":"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","file":"static/js/17.55088ccd.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useTranslation } from 'react-i18next';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport { USD_SIGN } from 'constants/currency';\r\n\r\nimport Table from 'components/Table';\r\nimport Currency from 'components/Currency';\r\nimport Card from 'components/Card';\r\nimport Link from 'components/Link';\r\nimport { HeadingSmall } from 'components/Typography';\r\nimport { ButtonPrimary } from 'components/Button';\r\nimport Spinner from 'components/Spinner';\r\n\r\nimport { getEtherscanTxLink } from 'utils/explorers';\r\nimport {\r\n\tLONG_CRYPTO_CURRENCY_DECIMALS,\r\n\tSHORT_CRYPTO_CURRENCY_DECIMALS,\r\n\tformatTxTimestamp,\r\n\tformatCurrency,\r\n\tformatCurrencyWithSign,\r\n\tformatCurrencyWithKey,\r\n} from 'utils/formatters';\r\n\r\nimport { TableNoResults } from 'shared/commonStyles';\r\n\r\nimport { getNetworkId } from 'ducks/wallet/walletDetails';\r\nimport {\r\n\tfetchMyTradesRequest,\r\n\tgetMyTrades,\r\n\tgetIsLoadingMyTrades,\r\n\tgetIsRefreshingMyTrades,\r\n\tgetIsLoadedMyTrades,\r\n} from 'ducks/trades/myTrades';\r\n\r\nexport const Exchanges = ({\r\n\tmyTrades,\r\n\tisLoadingMyTrades,\r\n\tisLoadedMyTrades,\r\n\tisRefreshingMyTrades,\r\n\tnetworkId,\r\n\tfetchMyTradesRequest,\r\n}) => {\r\n\tconst { t } = useTranslation();\r\n\r\n\tuseEffect(() => {\r\n\t\tfetchMyTradesRequest();\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<StyledCard>\r\n\t\t\t<Card.Header>\r\n\t\t\t\t<HeadingSmall>{t('assets.exchanges.title')}</HeadingSmall>\r\n\t\t\t\t{isRefreshingMyTrades && <Spinner size=\"sm\" />}\r\n\t\t\t</Card.Header>\r\n\t\t\t<StyledCardBody>\r\n\t\t\t\t<Table\r\n\t\t\t\t\tpalette=\"striped\"\r\n\t\t\t\t\tcolumns={[\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tHeader: <>{t('assets.exchanges.table.date-time-col')}</>,\r\n\t\t\t\t\t\t\taccessor: 'timestamp',\r\n\t\t\t\t\t\t\tCell: (cellProps) => formatTxTimestamp(cellProps.cell.value),\r\n\t\t\t\t\t\t\twidth: 150,\r\n\t\t\t\t\t\t\tsortable: true,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tHeader: <>{t('assets.exchanges.table.pair-col')}</>,\r\n\t\t\t\t\t\t\tid: 'trade-pair',\r\n\t\t\t\t\t\t\tCell: (cellProps) => {\r\n\t\t\t\t\t\t\t\tconst { fromCurrencyKey, toCurrencyKey } = cellProps.row.original;\r\n\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<Currency.Pair\r\n\t\t\t\t\t\t\t\t\t\tbaseCurrencyKey={fromCurrencyKey}\r\n\t\t\t\t\t\t\t\t\t\tquoteCurrencyKey={toCurrencyKey}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\twidth: 150,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tHeader: <>{t('assets.exchanges.table.buying-col')}</>,\r\n\t\t\t\t\t\t\taccessor: 'toAmount',\r\n\t\t\t\t\t\t\tsortType: 'basic',\r\n\t\t\t\t\t\t\tCell: (cellProps) => (\r\n\t\t\t\t\t\t\t\t<Tooltip\r\n\t\t\t\t\t\t\t\t\ttitle={formatCurrency(\r\n\t\t\t\t\t\t\t\t\t\tcellProps.row.original.toAmount,\r\n\t\t\t\t\t\t\t\t\t\tLONG_CRYPTO_CURRENCY_DECIMALS\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\tplacement=\"top\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t{formatCurrencyWithKey(\r\n\t\t\t\t\t\t\t\t\t\t\tcellProps.row.original.toCurrencyKey,\r\n\t\t\t\t\t\t\t\t\t\t\tcellProps.row.original.toAmount,\r\n\t\t\t\t\t\t\t\t\t\t\tSHORT_CRYPTO_CURRENCY_DECIMALS\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\twidth: 150,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tHeader: <>{t('assets.exchanges.table.selling-col')}</>,\r\n\t\t\t\t\t\t\taccessor: 'fromAmount',\r\n\t\t\t\t\t\t\tsortType: 'basic',\r\n\t\t\t\t\t\t\tCell: (cellProps) => (\r\n\t\t\t\t\t\t\t\t<Tooltip\r\n\t\t\t\t\t\t\t\t\ttitle={formatCurrency(\r\n\t\t\t\t\t\t\t\t\t\tcellProps.row.original.fromAmount,\r\n\t\t\t\t\t\t\t\t\t\tLONG_CRYPTO_CURRENCY_DECIMALS\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\tplacement=\"top\"\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t{formatCurrencyWithKey(\r\n\t\t\t\t\t\t\t\t\t\t\tcellProps.row.original.fromCurrencyKey,\r\n\t\t\t\t\t\t\t\t\t\t\tcellProps.row.original.fromAmount,\r\n\t\t\t\t\t\t\t\t\t\t\tSHORT_CRYPTO_CURRENCY_DECIMALS\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\twidth: 150,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tHeader: <>{t('assets.exchanges.table.price-col')}</>,\r\n\t\t\t\t\t\t\taccessor: 'price',\r\n\t\t\t\t\t\t\tsortType: 'basic',\r\n\t\t\t\t\t\t\tCell: (cellProps) => (\r\n\t\t\t\t\t\t\t\t<span>{formatCurrencyWithSign(USD_SIGN, cellProps.cell.value)}</span>\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\twidth: 150,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tHeader: <>{t('assets.exchanges.table.total-col')}</>,\r\n\t\t\t\t\t\t\taccessor: 'amount',\r\n\t\t\t\t\t\t\tsortType: 'basic',\r\n\t\t\t\t\t\t\tCell: (cellProps) => (\r\n\t\t\t\t\t\t\t\t<span>{formatCurrencyWithSign(USD_SIGN, cellProps.cell.value)}</span>\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\twidth: 150,\r\n\t\t\t\t\t\t\tsortable: true,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tHeader: <>{t('assets.exchanges.table.status-col')}</>,\r\n\t\t\t\t\t\t\taccessor: 'status',\r\n\t\t\t\t\t\t\tCell: () => t('common.tx-status.complete'),\r\n\t\t\t\t\t\t\twidth: 150,\r\n\t\t\t\t\t\t\tsortable: true,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tHeader: <>{t('assets.exchanges.table.verify-col')}</>,\r\n\t\t\t\t\t\t\taccessor: 'actions',\r\n\t\t\t\t\t\t\tCell: (cellProps) => (\r\n\t\t\t\t\t\t\t\t<Link\r\n\t\t\t\t\t\t\t\t\tto={getEtherscanTxLink(networkId, cellProps.row.original.hash)}\r\n\t\t\t\t\t\t\t\t\tisExternal={true}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<ButtonPrimary size=\"xs\">{t('common.actions.view')}</ButtonPrimary>\r\n\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t]}\r\n\t\t\t\t\tdata={myTrades}\r\n\t\t\t\t\tisLoading={isLoadingMyTrades && !isLoadedMyTrades}\r\n\t\t\t\t\tnoResultsMessage={\r\n\t\t\t\t\t\tisLoadedMyTrades && myTrades.length === 0 ? (\r\n\t\t\t\t\t\t\t<TableNoResults>{t('assets.exchanges.table.no-results')}</TableNoResults>\r\n\t\t\t\t\t\t) : undefined\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t</StyledCardBody>\r\n\t\t</StyledCard>\r\n\t);\r\n};\r\n\r\nExchanges.propTypes = {\r\n\tmyTrades: PropTypes.array.isRequired,\r\n\tisLoadingMyTrades: PropTypes.bool.isRequired,\r\n\tisRefreshingMyTrades: PropTypes.bool.isRequired,\r\n\tisLoadedMyTrades: PropTypes.bool.isRequired,\r\n\tnetworkId: PropTypes.number.isRequired,\r\n};\r\n\r\nconst StyledCard = styled(Card)`\r\n\tflex-grow: 1;\r\n`;\r\n\r\nconst StyledCardBody = styled(Card.Body)`\r\n\tpadding: 0;\r\n\tflex-grow: 1;\r\n`;\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tnetworkId: getNetworkId(state),\r\n\tmyTrades: getMyTrades(state),\r\n\tisLoadingMyTrades: getIsLoadingMyTrades(state),\r\n\tisRefreshingMyTrades: getIsRefreshingMyTrades(state),\r\n\tisLoadedMyTrades: getIsLoadedMyTrades(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n\tfetchMyTradesRequest,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Exchanges);\r\n"],"sourceRoot":""}